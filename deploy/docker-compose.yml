version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    env_file:
      - env_file
    container_name: telegram_admin_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-telegram_admin_api_prod}
      POSTGRES_USER: ${DB_USERNAME:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d
    networks:
      - telegram_admin_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Elixir Application
  app:
    build:
      context: ..
      dockerfile: deploy/Dockerfile
    env_file:
      - env_file
    container_name: telegram_admin_app
    restart: unless-stopped
    environment:
      - DB_HOST=postgres
      - DB_NAME=${DB_NAME:-telegram_admin_api_prod}
      - DB_USERNAME=${DB_USERNAME:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-postgres}
      - HOST=${HOST:-body-architect.ru}
      - GUARDIAN_SECRET_KEY=${GUARDIAN_SECRET_KEY}
      - POOL_SIZE=${POOL_SIZE:-10}
      - SECRET_KEY_BASE=${SECRET_KEY_BASE}
      - PHX_HOST=${HOST:-body-architect.ru}
      - PORT=4000
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - telegram_admin_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    env_file:
      - env_file
    container_name: telegram_admin_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    depends_on:
      - app
    networks:
      - telegram_admin_network
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"

  # Certbot for SSL certificates
  certbot:
    image: certbot/certbot
    env_file:
      - env_file
    container_name: telegram_admin_certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    command: certonly --webroot --webroot-path=/var/www/certbot --email ${CERTBOT_EMAIL} --agree-tos --no-eff-email -d ${HOST:-body-architect.ru}
    networks:
      - telegram_admin_network

volumes:
  postgres_data:

networks:
  telegram_admin_network:
    driver: bridge 