defmodule TelegramApi.Chain.RespStartChain do
  use Telegex.Chain

  require Logger

  alias TelegramApi.Context
  alias Core.Context, as: CoreContext

  @impl Telegex.Chain
  def handle(%{message: %Telegex.Type.Message{text: "/start"}} = update, context) do
    with {:ok, chat_id} <- Context.get_chat_id(update),
         {:ok, from} <- Context.get_from(update),
         {:ok, username} <- Context.get_username(from) do
      # This Task.start is optional but good practice to not block the chain
      Task.start(fn ->
        user = CoreContext.get_or_create_user(%{telegram_id: from.id, username: username})
        send_welcome_message(chat_id, user)
      end)
    else
      error ->
        Logger.error(
          "Could not extract required data from update in RespStartChain: #{inspect(error)}"
        )
    end

    {:stop, context}
  end

  def handle(_update, context), do: {:ok, context}

  defp send_welcome_message(chat_id, user) do
    if Enum.empty?(user.marzban_users) do
      # User has NO connections
      text =
        """
        üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, #{user.username}!*

        –≠—Ç–æ –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞—à–∏–º–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º–∏ –∫ VPN.

        –£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π.
        –ù–∞–∂–º–∏—Ç–µ *–°–æ–∑–¥–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ*, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø.
        """

      keyboard = %{
        inline_keyboard: [
          [%{text: "–°–æ–∑–¥–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", callback_data: "add_connection:v1"}]
        ]
      }

      Context.send_message(chat_id, text, parse_mode: "Markdown", reply_markup: keyboard)
    else
      # User HAS connections
      connections_list =
        user.marzban_users
        |> Enum.map(&"  - `#{&1}`")
        |> Enum.join("\n")

      text =
        """
        üëã *–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, #{user.username}!*

        –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:
        #{connections_list}

        –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–Ω–æ –∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç.
        """

      keyboard = %{
        inline_keyboard: [
          [
            %{text: "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", callback_data: "add_connection:v1"},
            %{text: "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data: "personal_account:v1"}
          ]
        ]
      }

      Context.send_message(chat_id, text, parse_mode: "Markdown", reply_markup: keyboard)
    end
  end
end
